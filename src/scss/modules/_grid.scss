/*---------------------------------------------------------------------------*\
  GRID SYSTEM
\*---------------------------------------------------------------------------*/
/**
 * Inline-block grid.
 *
 * Example:
 *   4 columns side by side in a 12 column grid. When the viewport shrinks 
 *   the columns will collapse to two per row, and finally the columns
 *   will span the full width on a small mobile viewport.
 *

 <div class="grid">
   <div class="col-2 col-6--lg col-12--sm">Col 1</div>
   <div class="col-4 col-6--lg col-12--sm">Col 1</div>
   <div class="col-4 col-6--lg col-12--sm">Col 1</div>
   <div class="col-2 col-6--lg col-12--sm">Col 1</div>
 </div>

 *
 * Note: The row class can be used instead of the grid class and
 *       divs can be used instead of a list.
 *
 * Note: The only way to guarantee that the columns behave
 *       as intended is to remove all the white space between them
 *       by minifying the HTML, commenting white space, etc..
 *
 * Note: This is a prototype module. There are some configuration
 *       options that havent been implemented yet. Expect updates.
 */





/*---------------------------------------------------------------------------*\
  VARIABLES
\*---------------------------------------------------------------------------*/

/**
 * Max container width. Container is fluid below this width.
 */
$grid-container-width: 1024px !default;

/**
 * Gutters on the sides of the page when viewport is below
 * the container max width.
 */
$grid-container-gutter: 1em !default;

/**
 * The number of columns and the gutter between them.
 */
$grid-column-count: 12 !default;
$grid-column-gutter: 2em !default;

/**
 * Enable mobile first media queries.
 */
/* TODO: this */
$grid-mobile-first: false !default;

/**
 * Set to false to disable media queries.
 * This will of course override $mobile-first.
 */
$grid-responsive: true !default;

/**
 * Enable or disable column modifiers.
 */
$grid-use-pull: true !default;
$grid-use-push: true !default;
$grid-use-offset: true !default;

/**
 * Media query breakpoints.
 */
/* TODO: make it easy to add/remove breakpoints */
$bp-xs: 400px !default;
$bp-sm: 600px !default;
$bp-md: 800px !default;
$bp-lg: 1000px !default;
$bp-xl: 1200px !default;





/*---------------------------------------------------------------------------*\
  GRID SCAFFOLDING
\*---------------------------------------------------------------------------*/

.clearfix,
%clearfix {
    &:before,
    &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
    }
}



/**
 * Grid container.
 *
 * 1. Fluid container padding behaves oddly with box-sizing: border-box.
 */
.container {
    @extend %clearfix;
    @if $grid-responsive {
        max-width: $grid-container-width;
    }
    @else {
        width: $grid-container-width;
    }
    margin: 0 auto;
    padding-left: $grid-container-gutter;
    padding-right: $grid-container-gutter;
    -webkit-box-sizing: content-box; /* 1 */
       -moz-box-sizing: content-box;
            box-sizing: content-box;
}



/**
 * Grid wrapper
 *
 * 1. Apply negative margins to the sides to make columns flush with container.
 */
%grid {
    @extend %clearfix;
    list-style: none;
    margin: 0;
    padding: 0;
    margin-left: -($grid-column-gutter/2); /* 1 */
    margin-right: -($grid-column-gutter/2); /* 1 */
}

.grid {
    @extend %grid;
}

.grid-center {
    text-align: center;
}

.grid-right {
    text-align: right;
}



/**
 * Column base.
 *
 * 1. Inline-block grid. Shamelessly based off of:
 *    http://purecss.io/ and http://csswizardry.com/csswizardry-grids/
 * 2. Position columns relatively in order to push/pull them.
 */
%col {
    min-height: 1px;
    padding-left: $grid-column-gutter/2;
    padding-right: $grid-column-gutter/2;
    display: inline-block; /* 1 */
    vertical-align: top;
    @if $grid-use-push or $grid-use-pull {
        position: relative; /* 2 */
    }
}





/*---------------------------------------------------------------------------*\
  COLUMNS
\*---------------------------------------------------------------------------*/

/**
 * Create column width and modifier classes based on $column-count.
 *
 * 1. Extend the base column so the class '.col' doesn't need to be added.
 * 2. Set the width as a simple fraction.
 * 3. Utilize relative positioning and the left property to push/pull columns.
 * 4. Use a margin to offset columns so that no other columns can use that space.
 *
 * TODO: refactor this into a mixin
 */
@for $i from 1 through $grid-column-count {

    .col-#{$i} {
        @extend %col; /* 1 */
        width: percentage($i/$grid-column-count); /* 2 */
    }
    @if $grid-use-push {
        .push-#{$i} {
            left: percentage($i/$grid-column-count); /* 3 */
        }
    }
    @if $grid-use-pull {
        .pull-#{$i} {
            left: -(percentage($i/$grid-column-count)); /* 3 */
        }
    }
    @if $grid-use-pull {
        .offset-#{$i} {
            margin-left: percentage($i/$grid-column-count); /* 4 */
        }
    }

} // for





/*---------------------------------------------------------------------------*\
  RESPONSIVE COLUMNS
\*---------------------------------------------------------------------------*/

/**
 * Setup responsive media queries with columns, and modifiers.
 *
 * 1. Map breakpoint extensions to their variables.
 * 2. Reverse the direction media queries cascade if mobile first.
 * 3. Loop through the breakpoint map and make column classes
 *    using the size extension. Use the size extensions associated
 *    variable for the breakpoint.
 */
@if $grid-responsive {

    /* TODO: populate this map dynamically */
    $bp-map: ( /* 1 */
            xl: $bp-xl,
            lg: $bp-lg,
            md: $bp-md,
            sm: $bp-sm,
            xs: $bp-xs,
    );

    $media: if($grid-mobile-first, min-width, max-width); /* 2 */


    @each $size, $bp in $bp-map { /* 3 */

        /* #{$size} #{$bp} display */
        @media ($media: $bp) {

            /* TODO: refactor this into a mixin */
            @for $i from 0 through $grid-column-count {
                @if $i != 0 {
                  .col-#{$i}--#{$size} {
                    width: percentage($i/$grid-column-count);
                  }
                }
                @if $grid-use-push {
                    .push-#{$i}--#{$size} {
                        left: percentage($i/$grid-column-count);
                    }
                }
                @if $grid-use-pull {
                    .pull-#{$i}--#{$size} {
                        left: -(percentage($i/$grid-column-count));
                    }
                }
                @if $grid-use-pull {
                    .offset-#{$i}--#{$size} {
                        margin-left: percentage($i/$grid-column-count);
                    }
                }
            }

        } // media
    } // each
} // if



