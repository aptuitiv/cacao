/*---------------------------------------------------------------------------*\
  GRID SYSTEM
\*---------------------------------------------------------------------------*/
/**
 * Inline-block grid. Shamelessly based off of:
 * http://purecss.io/ and http://csswizardry.com/csswizardry-grids/
 *
 * Example:
 *   4 columns side by side with the default grid settings. When the viewport 
 *   shrinks the columns will collapse to two per row, and finally the 
 *   columns will span the full width on a small mobile viewport.
 *

 <div class="grid">
   <div class="col-2 col-6-lg col-12-sm">Col 1</div>
   <div class="col-4 col-6-lg col-12-sm">Col 1</div>
   <div class="col-4 col-6-lg col-12-sm">Col 1</div>
   <div class="col-2 col-6-lg col-12-sm">Col 1</div>
 </div>

 *
 * Note: An unordered list may be used if you'd like to keep markup 
 *       somewhat semantic.
 *
 * Note: The only way to guarantee that the columns behave
 *       as intended is to remove all the white space between them
 *       by minifying the HTML, commenting white space, etc..
 *
 * Note: This is a prototype module. There are some configuration
 *       options that havent been implemented yet. Expect updates.
 */





/*---------------------------------------------------------------------------*\
  VARIABLES
\*---------------------------------------------------------------------------*/

/**
 * Max container width. Container is fluid below this width.
 */
$grid-container-width: 1024px !default;

/**
 * Gutters on the sides of the page when viewport is below
 * the container max width.
 */
$grid-container-gutter: 1em !default;

/**
 * The number of columns and the gutter between them.
 */
$grid-column-count: 12 !default;
$grid-column-gutter: 2em !default;

/**
 * Enable mobile first media queries.
 */
$grid-mobile-first: false !default;

/**
 * Set to false to disable media queries.
 * This will of course override $mobile-first.
 */
$grid-responsive: true !default;

/**
 * Enable or disable column modifiers.
 */
$grid-use-pull: true !default;
$grid-use-push: true !default;
$grid-use-offset: true !default;

/**
 * Media query breakpoints.
 */
$grid-breakpoints: (
    xl: 1200px,
    lg: 1000px,
    md: 800px,
    sm: 600px,
    xs: 400px,
) !default;





/*---------------------------------------------------------------------------*\
  GRID SCAFFOLDING
\*---------------------------------------------------------------------------*/

%clearfix,
.clearfix {
    &:before,
    &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
    }
}



/**
 * Grid container.
 *
 * 1. Fluid container padding behaves oddly with box-sizing: border-box.
 */
.container {
    @extend %clearfix;
    @if $grid-responsive {
        max-width: $grid-container-width;
    }
    @else {
        width: $grid-container-width;
    }
    margin: 0 auto;
    padding-left: $grid-container-gutter;
    padding-right: $grid-container-gutter;
    -webkit-box-sizing: content-box; /* 1 */
       -moz-box-sizing: content-box;
            box-sizing: content-box;
}



/**
 * Grid wrapper
 *
 * 1. Apply negative margins to the sides to make columns flush with container.
 */
.grid,
%grid {
    @extend %clearfix;
    list-style: none;
    margin: 0;
    padding: 0;
    margin-left: -($grid-column-gutter/2); /* 1 */
    margin-right: -($grid-column-gutter/2); /* 1 */
}

.grid-center {
    @extend %grid;
    text-align: center;
}

.grid-right {
    @extend %grid;
    text-align: right;
}



/**
 * Column base.
 *
 * 1. Position columns relatively in order to push/pull them.
 */
%col {
    min-height: 1px;
    padding-left: $grid-column-gutter/2;
    padding-right: $grid-column-gutter/2;
    display: inline-block;
    vertical-align: top;
    @if $grid-use-push or $grid-use-pull {
        position: relative; /* 1 */
    }
}





/*---------------------------------------------------------------------------*\
  COLUMNS
\*---------------------------------------------------------------------------*/

/**
 * Builder mixin.
 *
 * Creates column and modifier classes based on input and grid settings.
 *
 * $col: Should be the number of columns to span
 * $ext: Optional. The extension to use for the breakpoint classes.
 *       The 'md' in '.col-12-md'
 */
@mixin grid-create-width($col, $ext: "") {

    //  Prepend a seperator onto the extension if there is one.
    @if $ext != "" {
        $ext: "-" + $ext;
    }

    .col-#{$col}#{$ext} {
        // Extend the base column so the class '.col' doesn't need to be added.
        // Only do this for base columns instead of breakpoint classes.
        @if $ext == "" {
            @extend %col;
        }
        // Set the width as a simple fraction.
        width: percentage($col/$grid-column-count);
    }
    @if $grid-use-push {
        .push-#{$col}#{$ext} {
            // Utilize relative positioning and the left property to push/pull columns.
            left: percentage($col/$grid-column-count);
        }
    }
    @if $grid-use-pull {
        .pull-#{$col}#{$ext} {
            left: -(percentage($col/$grid-column-count));
        }
    }
    @if $grid-use-pull {
        .offset-#{$col}#{$ext} {
            // Use a margin to offset columns so no other columns can use that space.
            margin-left: percentage($col/$grid-column-count);
        }
    }
}



/**
 * Create column width and modifier classes based on $column-count.
 */
@for $i from 1 through $grid-column-count {
    @include grid-create-width($i);
}



/**
 * Setup responsive media queries with columns, and modifiers.
 */
@if $grid-responsive {

    $grid-media: max-width;

    // Reverse the direction media queries cascade if mobile first.
    @if $grid-mobile-first {
        $grid-media: min-width;
        $grid-breakpoints: reverse($grid-breakpoints);
    }

    // Loop through the breakpoint map and make column classes
    // using the size extension. Use the size extensions associated
    // variable for the breakpoint.
    @each $ext, $bp in $grid-breakpoints {
        @media ($grid-media: $bp) {
            @for $i from 0 through $grid-column-count {
                @include grid-create-width($i, $ext);
            }
        }
    }

}



