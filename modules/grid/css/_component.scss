/*---------------------------------------------------------------------------*\
  GRID SYSTEM
\*---------------------------------------------------------------------------*/
/**
 * CONTENTS
 * - Variables.
 * - Grid library. Necessary components.
 * - Base elements.
 * - Column width, positioning, and responsive classes.
 * - Modifier classes.
 */

@import "settings";



/**
 * Inline-block grid. Shamelessly based off of:
 * http://purecss.io/ and http://csswizardry.com/csswizardry-grids/
 *
 * Note: The only way to guarantee that the columns behave
 *       as intended is to remove all the white space between them
 *       by minifying the HTML, commenting white space, etc..
 *
 * Basic Example:
 *   4 columns side by side with the default grid settings. When the viewport 
 *   shrinks the columns will collapse to two per row, and finally the 
 *   columns will span the full width on a small mobile viewport.
 *

 <div class="grid">
   <div class="col-2 col-6-lg col-12-sm">Col 1</div>
   <div class="col-4 col-6-lg col-12-sm">Col 1</div>
   <div class="col-4 col-6-lg col-12-sm">Col 1</div>
   <div class="col-2 col-6-lg col-12-sm">Col 1</div>
 </div>

 *
 * Note: An unordered list may be used in place of <div>s.
 *
 */





/*---------------------------------------------------------------------------*\
  GRID LIBRARY
\*---------------------------------------------------------------------------*/

/**
 * Reverse a list or map.
 * Used to reverse the breakpoint map if mobile first.
 * Source: http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/
 */
@function grid-reverse($list, $recursive: false) {
    $result: ();

    @for $i from length($list)*-1 through -1 {
        @if type-of(nth($list, abs($i))) == list and $recursive {
            $result: append($result, reverse(nth($list, abs($i)), $recursive));      
        }
        @else {
            $result: append($result, nth($list, abs($i)));
        }
    }

    @return $result;
}



/**
 * Builder mixin.
 *
 * Creates column and modifier classes based on input and grid settings.
 *
 * $col: Should be the number of columns to span.
 * $ext: Optional. The extension to use for the breakpoint classes.
 *       The 'md' in '.col-12-md'
 */
@mixin grid-create-width($col, $ext: "") {

    /**
     * Prepend a seperator onto the extension if there is one.
     */
    @if $ext != "" {
        $ext: "-" + $ext;
    }

    /**
     * Column width class.
     * Sets the width as a simple fraction.
     * Extend the base column if the class is outside of a media query.
     */
    .col-#{$col}#{$ext} {
        @if $ext == "" {
            @extend %col;
        }
        width: percentage($col/$grid-column-count);
    }
    /**
     * Utilize relative positioning and the left property to push/pull columns.
     */
    @if $grid-use-push {
        .push-#{$col}#{$ext} {
            left: percentage($col/$grid-column-count);
        }
    }
    @if $grid-use-pull {
        .pull-#{$col}#{$ext} {
            left: -(percentage($col/$grid-column-count));
        }
    }
    /**
     * Use a margin to offset columns so no other columns can use that space.
     */
    @if $grid-use-pull {
        .offset-#{$col}#{$ext} {
            margin-left: percentage($col/$grid-column-count);
        }
    }
}





/*---------------------------------------------------------------------------*\
  GRID BASE
\*---------------------------------------------------------------------------*/

/**
 * Grid wrapper.
 * Resets list styles so an unordered list may be used.
 * Also applies a negative margin to the left to make the columns nestable 
 * and flush.
 */
%grid,
.grid {
    list-style: none;
    margin: 0;
    padding: 0;
    margin-left: -$grid-column-gutter;
}



/**
 * Column base.
 * Aligned to the top by default.
 *
 * 1. Set a min-height so columns have a width even if they are empty.
 * 2. Position columns relatively in order to push/pull them.
 * 3. Apply box-sizing instead of relying on it to be set globally.
 */
%col {
    display: inline-block;
    min-height: 1px; /* 1 */
    padding-left: $grid-column-gutter;
    vertical-align: top;
    @if $grid-use-push or $grid-use-pull {
        position: relative; /* 2 */
    }
    -webkit-box-sizing: border-box; /* 3 */
       -moz-box-sizing: border-box;
            box-sizing: border-box;
}





/*---------------------------------------------------------------------------*\
  COLUMNS
\*---------------------------------------------------------------------------*/

/**
 * Create column width and modifier classes based on $column-count.
 * Start $i at 1 because there is no need for 0 width columns or modifiers
 * outside of media queries.
 */
@for $i from 1 through $grid-column-count {
    @include grid-create-width($i);
}



/**
 * Setup responsive media queries with columns, and modifiers.
 */
@if $grid-responsive {

    $grid-media: max-width;

    /**
     * Reverse the direction media queries cascade if mobile first.
     */
    @if $grid-mobile-first {
        $grid-media: min-width;
        $grid-breakpoints: grid-reverse($grid-breakpoints);
    }

    /**
     * Loop through the breakpoint map and make responsive column/modifier 
     * classes using the breakpoint extension.
     */
    @each $ext, $bp in $grid-breakpoints {
        @media ($grid-media: $bp) {
            @for $i from 0 through $grid-column-count {
                @include grid-create-width($i, $ext);
            }
        }
    }

}





/*---------------------------------------------------------------------------*\
  MODIFIERS
\*---------------------------------------------------------------------------*/

/**
 * The modifiers below are experimental and use some ugly selectors.
 */
@if $grid-modifiers {

    /**
     * Modifies horizontal alignment of columns.
     * When using these be aware that they reset columns to text-align: left;
     */
    .grid.-align-center {
        text-align: center;
        > [class*="col-"] {
            text-align: left;
        }
    }

    .grid.-align-right {
        text-align: right;
        > [class*="col-"] {
            text-align: left;
        }
    }



    /**
     * Modifies vertical alignment of columns.
     */
    .grid.-valign-middle {
        > [class*="col-"] {
            vertical-align: middle;
        }
    }

    .grid.-valign-bottom {
        > [class*="col-"] {
            vertical-align: bottom;
        }
    }



    /**
     * Modifies grid gutters.
     */
    .grid.-gutter-none {
        margin: 0;
        > [class*="col-"] {
            padding-left: 0;
        }
    }

    .grid.-gutter-narrow {
        margin-left: -($grid-column-gutter/2);
        > [class*="col-"] {
            padding-left: $grid-column-gutter/2;
        }
    }

    .grid.-gutter-wide {
        margin-left: -($grid-column-gutter*2);
        > [class*="col-"] {
            padding-left: $grid-column-gutter*2;
        }
    }

}



